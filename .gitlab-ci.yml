stages:
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_NAME: "choibenassist-backend"
  DOCKER_HOST: unix:///var/run/docker.sock
  # Common environment variables for all stages
  RATE_LIMIT_PER_MINUTE: "100"

# Test stage
test:
  stage: test
  image: python:3.13.3
  tags:
    - python 
  before_script:
    - echo "🔧 Setting up Python environment..."
    - python -m venv .venv
    - source .venv/bin/activate
    - echo "📦 Installing dependencies..."
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - echo "✅ Dependencies installed successfully"
    # Create .env file for tests
    - echo "⚙️ Creating test environment file..."
    - |
      cat > .env << 'TEST_ENV_EOF'
      GEMINI_API_KEY=${GEMINI_API_KEY}
      SUPABASE_URL=${SUPABASE_URL}
      SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      API_SECRET_KEY=${API_SECRET_KEY}
      DEBUG=True
      ENVIRONMENT=test
      RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE}
      TEST_ENV_EOF
    - echo "✅ Test environment file created"
  script:
    - echo "🧪 Running tests..."
    - pytest tests/ -v
    - echo "🎨 Checking code formatting..."
    - black --check app/ tests/
    - echo "✅ All tests passed!"
  only:
    - main

# Deploy to production (main branch only)
deploy_production:
  stage: deploy
  image: docker:latest
  tags:
    - docker 
  before_script:
    - echo "🐳 Setting up Docker environment..."
    - echo "🔍 Checking required environment variables..."
    - test -n "$GEMINI_API_KEY" || (echo "❌ GEMINI_API_KEY is not set!" && exit 1)
    - test -n "$SUPABASE_URL" || (echo "❌ SUPABASE_URL is not set!" && exit 1)
    - test -n "$SUPABASE_ANON_KEY" || (echo "❌ SUPABASE_ANON_KEY is not set!" && exit 1)
    - test -n "$API_SECRET_KEY" || (echo "❌ API_SECRET_KEY is not set!" && exit 1)
    - echo "✅ All required environment variables are set."
    - echo "🔧 Initializing Docker..."
    - docker info || (echo "❌ Docker is not running!" && exit 1)
  script:
    - |
      echo "🐳 Starting Docker build and deploy process..."
      
      # Build Docker image using Dockerfile
      echo "📦 Building Docker image using Dockerfile..."
      docker build -t $DOCKER_IMAGE_NAME:production -f Dockerfile .
      echo "✅ Docker image built successfully"

      # Stop existing container
      echo "🛑 Stopping existing container..."
      docker stop choibenassist-production || true
      docker rm choibenassist-production || true
      echo "✅ Old container removed"
      
      # Run new container
      echo "🚀 Starting new container..."
      docker run -d \
        --name choibenassist-production \
        --restart unless-stopped \
        -p 8000:8000 \
        --env-file .env \
        choibenassist-backend:production
      echo "✅ New container started successfully"
      
      # Health check
      echo "🏥 Performing health check..."
      sleep 30
      curl -f http://localhost:8000/api/health
      echo "✅ Health check passed! Deployment completed successfully 🎉"
  environment:
    name: production
    url: http://$PRODUCTION_SERVER:8000
  only:
    - main
